#!/usr/bin/env ruby
require 'pry'
require 'fileutils'
require 'open-uri'
require 'colorize'

include FileUtils

cmd = ARGV[0]
project_name = ARGV[1]

def make_project(project_name)
  # make app repo
  mkdir(project_name)

  # and do all the work there...
  cd(project_name) do

    # assets
    folders = %w(
      public
      public/images
      public/stylesheets
      views
      db
      controllers
      helpers
      config
      models
      spec
    )

    makedirs(folders)

    File.open('db/seeds.rb', 'w+') do |f|
      f.write <<SEEDS
require 'sequel'
DB = Sequel.connect("postgres://localhost/#{project_name}_development")
SEEDS
    end

    touch 'db/schema.sql'

    File.open('helpers/application_helper.rb', 'w+') do |f|
      f.write <<APPLICATION_HELPER
module ApplicationHelper
  def link_to(title, path)
    '<a href="' + path + '">' + title + '</a>'
  end
end
APPLICATION_HELPER
    end
    # .rspec
    File.open('.rspec', 'w+') do |f|
      f.write <<RSPEC
--color
--format documentation
--require spec_helper
RSPEC
    end

    # spec_helper.rb
    File.open('spec/spec_helper.rb', 'w+') do |f|
      f.write <<SPEC_HELPER
ENV['RACK_ENV'] = 'test'

require 'rspec'
require 'capybara/rspec'
# this may need to change...
require './app'
Capybara.app = App

RSpec.configure do |config|
  config.include Capybara::DSL
end
SPEC_HELPER
  end

    # styles
    # FileUtils.touch
    touch("public/stylesheets/style.css")

    File.open('public/stylesheets/normalize.css', 'w+') do |f|
      normalize_url = 'https://raw.githubusercontent.com/necolas/normalize.css/master/normalize.css'
      f.write(open(normalize_url).read)
    end

    # views
    File.open('views/layout.erb', 'w+') do |f|
      f.write <<HTML
<!doctype html>

<html>
  <head>
    <meta charset="utf-8">

    <title>#{project_name}</title>

    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link href="/stylesheets/normalize.css" rel="stylesheet" type="text/css" media="all">
    <link href="/stylesheets/style.css" rel="stylesheet" type="text/css" media="all">
  </head>

  <body>
    <h1>Hello from Layout.erb!</h1>
    <%= yield %>
  </body>
</html>
HTML
    end

    # Index.erb
    File.open('views/index.erb', 'w+') do |f|
    f.write <<INDEX
<h1>Hello from Index!</h1>
INDEX
    end

    # Gemfile
    File.open('Gemfile', 'w+') do |f|
      f.write <<GEMFILE
source 'https://rubygems.org'

# May have to update if/when I update my Ruby
ruby '2.1.2'

# Gems used in every environment
gem 'sinatra',  '1.4.5', require: 'sinatra/base'
gem 'redis',    '3.1.0'
gem 'httparty', '0.13.1'
gem 'sequel',   '~> 4.14.0'
gem 'pg',       '~> 0.17.1'

# only used in development locally
group :development, :test do
  gem 'pry',     '0.10.1'
  gem 'sinatra-contrib'
end

# gems specific just in the production environment
group :production do
end

group :test do
  gem 'rspec',    '~> 3.0.0'
  gem 'capybara', '~> 2.4.1'
end
GEMFILE
    end

    # default app!
    File.open('controllers/application_controller.rb', 'w+') do |f|
      f.write <<APPLICATION_CONTROLLER
class ApplicationController < Sinatra::Base

  ########################
  # Configuration
  ########################
  set :app_file,  File.expand_path(File.dirname(__FILE__), '../')

  helpers ApplicationHelper
  # allow put/delete forms in browsers that don't support it.
  enable :method_override
  # store data between HTTP requests in a cookie
  enable :sessions
  # session_secret will change with every start of the application
  # if we want to run shotgun, which creates new application instances
  # we must manually set session_secret
  set :session_secret, 'super secret'

  configure :test, :development do
    require 'sinatra/reloader'
    register Sinatra::Reloader
  end

end
APPLICATION_CONTROLLER
    end

    # config.ru
    File.open('config.ru', 'w+') do |f|
      f.write <<CONFIG
require 'rubygems'
require 'bundler'
Bundler.require(:default, ENV['RACK_ENV'] || 'development')

require './config/boot'

map('/') { run RootController }
CONFIG
    end

    File.open('config/boot.rb', 'w+') do |f|
      f.write <<BOOT_FILE
DB = Sequel.connect("postgres://localhost:5432/#{project_name}_development")
Dir['./helpers/*.rb'].each { |helper| require helper }
Dir['./models/*.rb'].each { |model| require model }
require './controllers/application_controller'
Dir['./controllers/*.rb'].each { |controller| require controller }
BOOT_FILE
    end

    # app.rb
    File.open('controllers/root_controller.rb', 'w+') do |f|
      f.write <<APP
class RootController < ApplicationController
  get('/') do
    render(:erb, :index)
  end
end
APP
    end
    system('bundle install')
    puts('>> OK!'.white)
    puts(">> Created #{project_name}!".green)
    puts('>> use `bundle exec rackup -p 3000` from inside the folder to run it!')
  end
end


if cmd == 'new'
  make_project(project_name)
elsif cmd == 'server'
  system('bundle exec rackup -p 3000')
elsif cmd == 'console'
  require 'rubygems'
  require 'bundler'
  Bundler.require(:default, ENV['RACK_ENV'] || 'development')
  require './config/boot'
  puts 'Starting console...'
  # how to get working based on blogpost
  # ARGV.delete('console')
  # Pry::CLI.parse_options
  Pry.start
else
  puts "don't know that command"
end
